<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Tech on Tehami's Blog</title><link>http://t3hami.github.io/tech/</link><description>Recent content in Tech on Tehami's Blog</description><generator>Hugo -- 0.150.0</generator><language>en-us</language><managingEditor>t3hami [at] gmail [dot] com (Muhammad Tehami)</managingEditor><webMaster>t3hami [at] gmail [dot] com (Muhammad Tehami)</webMaster><lastBuildDate>Sun, 19 Dec 2021 01:14:26 +0500</lastBuildDate><atom:link href="http://t3hami.github.io/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins On-Demand Agents</title><link>http://t3hami.github.io/tech/post_4/</link><pubDate>Sun, 19 Dec 2021 01:14:26 +0500</pubDate><author>t3hami [at] gmail [dot] com (Muhammad Tehami)</author><guid>http://t3hami.github.io/tech/post_4/</guid><description>&lt;h2 id="jenkins"&gt;Jenkins&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Jenkins Architecture" loading="lazy" src="http://t3hami.github.io/images/posts/post_4/jenkins-architecture.png"&gt;&lt;/p&gt;
&lt;p&gt;Jenkins is a server for automation that is free and open source. By automating the software development process, enterprises can save time and money. Jenkins is a tool that manages and controls software delivery processes across the whole lifecycle, including build, document, test, package, stage, deployment, static code analysis, and more.&lt;/p&gt;
&lt;p&gt;A typical Jenkins running in any organization looks like the above diagram. But there are multiple problems with the above architecture.&lt;/p&gt;</description></item><item><title>Understand Autoscaling Applications In Kubernetes Before Next Peak Hours</title><link>http://t3hami.github.io/tech/post_3/</link><pubDate>Tue, 07 Dec 2021 23:20:15 +0500</pubDate><author>t3hami [at] gmail [dot] com (Muhammad Tehami)</author><guid>http://t3hami.github.io/tech/post_3/</guid><description>&lt;h2 id="what-is-autoscaling"&gt;What is Autoscaling?&lt;/h2&gt;
&lt;p&gt;Automatic scaling, is a cloud computing strategy that dynamically modifies the amount of computational resources required for an application. Normally measured by the number of active servers based on the load on the farm. For example, the number of servers hosting a web application can automatically increase or decrease based on the number of active users on your site. Because such metrics can fluctuate substantially during the day, and servers are a limited resource that cost money to run even when inactive, there is often an incentive to run “just enough” servers to support the current demand while still being able to handle sudden and large surges in activity. Autoscaling is useful for such situations because it may reduce the number of active servers when activity is low, and it can also increase the number of active servers when activity is high.&lt;/p&gt;</description></item><item><title>Signing Git Commits with GPG</title><link>http://t3hami.github.io/tech/post_2/</link><pubDate>Sat, 27 Feb 2021 01:48:27 +0500</pubDate><author>t3hami [at] gmail [dot] com (Muhammad Tehami)</author><guid>http://t3hami.github.io/tech/post_2/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Git GPG" loading="lazy" src="http://t3hami.github.io/images/posts/post_2/git-gpg.jpeg"&gt;&lt;/p&gt;
&lt;h3 id="git"&gt;Git&lt;/h3&gt;
&lt;p&gt;Git is a crucial part of every developer’s life. We have come across from the cumbersome and hectic usage of bad old days versioning practice to a centralized and easy to collaborate process with git.&lt;/p&gt;
&lt;p&gt;As the versioning became easier and collaboration is on our fingertips, there comes the issue of authenticity of the work contributed by individuals.&lt;/p&gt;
&lt;h3 id="the-donkey-in-lions-skin"&gt;The Donkey in Lion’s Skin&lt;/h3&gt;
&lt;p&gt;We all have heard the The Donkey in Lion’s Skin story. The TLDR is a donkey dressed itself in a lion’s skin. Wherever the donkey went, the other animals and villagers feared him. The villagers and other animals thought that he was a real lion. After some time he became bold. Finally one day some people heard him braying. The people ran after him with sticks, and beat him to death. Hence, the poor donkey paid the price for his foolishness.&lt;/p&gt;</description></item><item><title>React.js DevOps Ready Application</title><link>http://t3hami.github.io/tech/post_1/</link><pubDate>Sun, 08 Nov 2020 00:08:37 +0500</pubDate><author>t3hami [at] gmail [dot] com (Muhammad Tehami)</author><guid>http://t3hami.github.io/tech/post_1/</guid><description>&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;Shipping your application in containers is a new norm and CI/CD is also a must have in today’s development. Here I’ve created a React.js DevOps ready application for reference of those who are new to Containers and CI/CD.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docker Nginx React.js" loading="lazy" src="http://t3hami.github.io/images/posts/post_1/docker-nginx-react.png"&gt;&lt;/p&gt;
&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;
&lt;p&gt;Docker is for managing container. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package.&lt;/p&gt;</description></item></channel></rss>